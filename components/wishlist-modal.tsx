"use client"

import { useState, useRef, useEffect } from "react"
import Image from "next/image"
import { X, Heart } from "lucide-react"
import { useRouter } from "next/navigation"
import { useAuth } from "@/context/auth-context"
import { routes } from "@/data/routes"
import { getUserWishlists, addRouteToWishlist, createWishlist, type Wishlist } from "@/data/users"
import { useWishlist } from "@/context/wishlist-context"

interface WishlistModalProps {
  isOpen: boolean
  onClose: () => void
  routeId: number
  routeName: string
  onAddToWishlist?: () => void
}

export default function WishlistModal({ isOpen, onClose, routeId, routeName, onAddToWishlist }: WishlistModalProps) {
  const [wishlists, setWishlists] = useState<Wishlist[]>([])
  const [isCreatingNew, setIsCreatingNew] = useState(false)
  const [newWishlistName, setNewWishlistName] = useState("")
  const [autoGeneratedWishlist, setAutoGeneratedWishlist] = useState<Wishlist | null>(null)
  const modalRef = useRef<HTMLDivElement>(null)
  const router = useRouter()
  const { user, isAuthenticated } = useAuth()
  const { updateWishlists } = useWishlist()

  // Load wishlists from user data
  useEffect(() => {
    if (isAuthenticated && user && isOpen) {
      const userWishlists = getUserWishlists(user.nickname)
      setWishlists(userWishlists)

      // Generate location-based wishlist name
      generateLocationWishlist()
    }
  }, [isAuthenticated, user, isOpen, routeId])

  // Generate a location-based wishlist name
  const generateLocationWishlist = () => {
    if (!isAuthenticated || !user) return

    // Get the route data to extract location
    const route = routes[routeId]
    if (!route) return

    // Extract location from the route
    const locationParts = route.location.split(",")
    const city = locationParts[0].trim()
    const country = locationParts.length > 1 ? locationParts[1].trim() : ""

    // Create wishlist name with location and current year
    const currentYear = new Date().getFullYear()
    const wishlistName = country ? `${country} (${city}) ${currentYear}` : `${city} ${currentYear}`

    // Check if a wishlist with this name already exists
    const existingWishlist = wishlists.find((w) => w.name === wishlistName)

    if (existingWishlist) {
      // If it exists, just highlight it
      setAutoGeneratedWishlist(existingWishlist)
    } else {
      // If it doesn't exist, create a virtual wishlist (not saved yet)
      setAutoGeneratedWishlist({
        id: -1, // Temporary ID
        name: wishlistName,
        routes: [],
      })
    }
  }

  // Handle click outside to close modal
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (modalRef.current && !modalRef.current.contains(event.target as Node)) {
        onClose()
      }
    }

    if (isOpen) {
      document.addEventListener("mousedown", handleClickOutside)
    }

    return () => {
      document.removeEventListener("mousedown", handleClickOutside)
    }
  }, [isOpen, onClose])

  // Prevent body scrolling when modal is open
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = "hidden"
    } else {
      document.body.style.overflow = "auto"
    }

    return () => {
      document.body.style.overflow = "auto"
    }
  }, [isOpen])

  // Get a representative image for a wishlist from its routes
  const getWishlistImage = (wishlist: Wishlist) => {
    if (wishlist.routes.length === 0) {
      return null // No image for empty wishlists
    }

    // Get the first route in the wishlist
    const firstRouteId = wishlist.routes[0]
    const route = routes[firstRouteId]

    // Return the first image from the route's gallery
    if (route && route.gallery && route.gallery.length > 0) {
      return `/${route.gallery[0]}`
    }

    return null
  }

  // Add route to wishlist
  const handleAddToWishlist = (wishlist: Wishlist) => {
    if (!isAuthenticated || !user) {
      router.push("/login")
      return
    }

    // If this is the auto-generated wishlist and it hasn't been created yet
    if (wishlist.id === -1 && autoGeneratedWishlist) {
      // Create the new wishlist in the database
      const newWishlist = createWishlist(user.nickname, wishlist.name, routeId)

      if (newWishlist) {
        // Update the wishlist context
        updateWishlists()

        // Notify parent component to update heart icon
        if (onAddToWishlist) {
          onAddToWishlist()
        }

        // Close the modal after a short delay
        setTimeout(() => {
          onClose()
        }, 500)
      }
      return
    }

    // Add the route to an existing wishlist in the database
    const success = addRouteToWishlist(user.nickname, wishlist.id, routeId)

    if (success) {
      // Update the local state to reflect the change
      setWishlists((prevWishlists) =>
        prevWishlists.map((w) => {
          if (w.id === wishlist.id && !w.routes.includes(routeId)) {
            return {
              ...w,
              routes: [...w.routes, routeId],
            }
          }
          return w
        }),
      )

      // Update the wishlist context
      updateWishlists()

      // Notify parent component to update heart icon
      if (onAddToWishlist) {
        onAddToWishlist()
      }

      // Close the modal after a short delay
      setTimeout(() => {
        onClose()
      }, 500)
    }
  }

  // Handle creating a new wishlist
  const handleCreateWishlist = () => {
    if (!isAuthenticated || !user || !newWishlistName.trim()) {
      return
    }

    // Create a new wishlist in the database
    const newWishlist = createWishlist(user.nickname, newWishlistName, routeId)

    if (newWishlist) {
      // Update the local state to include the new wishlist
      setWishlists((prevWishlists) => [...prevWishlists, newWishlist])

      // Update the wishlist context
      updateWishlists()

      // Notify parent component to update heart icon
      if (onAddToWishlist) {
        onAddToWishlist()
      }

      // Reset the form
      setNewWishlistName("")
      setIsCreatingNew(false)

      // Close the modal after a short delay
      setTimeout(() => {
        onClose()
      }, 500)
    }
  }

  if (!isOpen) return null

  // Redirect to login if not authenticated
  if (!isAuthenticated || !user) {
    return (
      <div className="fixed inset-0 bg-black/70 z-50 flex items-center justify-center p-4">
        <div ref={modalRef} className="bg-[#121214] rounded-xl max-w-md w-full p-6 relative">
          <button
            onClick={onClose}
            className="absolute top-4 right-4 text-gray-400 hover:text-white"
            aria-label="Close"
          >
            <X size={20} />
          </button>

          <div className="text-center py-8">
            <h2 className="text-xl font-medium mb-4">Войдите в аккаунт</h2>
            <p className="text-gray-400 mb-6">Чтобы добавлять маршруты в вишлисты, необходимо войти в аккаунт</p>
            <button
              onClick={() => {
                router.push("/login")
                onClose()
              }}
              className="bg-purple-600 hover:bg-purple-700 text-white py-2 px-6 rounded-lg transition-colors"
            >
              Войти
            </button>
          </div>
        </div>
      </div>
    )
  }

  // Combine existing wishlists with auto-generated one if it doesn't exist yet
  const displayWishlists = autoGeneratedWishlist
    ? autoGeneratedWishlist.id === -1
      ? [autoGeneratedWishlist, ...wishlists]
      : wishlists
    : wishlists

  return (
    <div className="fixed inset-0 bg-black/70 z-50 flex items-center justify-center p-4">
      <div
        ref={modalRef}
        className="bg-[#121214] rounded-xl max-w-xl w-full max-h-[90vh] flex flex-col overflow-hidden"
        style={{ height: "auto", minHeight: "600px" }}
      >
        {/* Header */}
        <div className="relative border-b border-[#27272f] p-5 flex-shrink-0">
          <button
            onClick={onClose}
            className="absolute left-5 top-1/2 -translate-y-1/2 p-1 rounded-full hover:bg-[#27272f] transition-colors"
            aria-label="Close"
          >
            <X size={20} />
          </button>
          <h2 className="text-center text-lg font-medium">Сохранить в вишлист</h2>
        </div>

        {/* Content Area - Scrollable */}
        <div className="p-5 overflow-y-auto flex-grow">
          {isCreatingNew ? (
            <div className="mb-4">
              <label htmlFor="wishlist-name" className="block text-sm mb-2">
                Название вишлиста
              </label>
              <input
                id="wishlist-name"
                type="text"
                value={newWishlistName}
                onChange={(e) => setNewWishlistName(e.target.value)}
                placeholder="Введите название вишлиста"
                className="w-full bg-[#18181c] border border-[#27272f] rounded-lg p-3 text-sm focus:outline-none focus:border-indigo-500"
                autoFocus
              />
              <div className="flex gap-2 mt-3">
                <button
                  onClick={() => setIsCreatingNew(false)}
                  className="px-4 py-2 rounded-lg border border-[#27272f] text-sm hover:bg-[#27272f] transition-colors"
                >
                  Отмена
                </button>
                <button
                  onClick={handleCreateWishlist}
                  disabled={!newWishlistName.trim()}
                  className={`px-4 py-2 rounded-lg text-sm bg-indigo-600 hover:bg-indigo-700 transition-colors ${
                    !newWishlistName.trim() ? "opacity-50 cursor-not-allowed" : ""
                  }`}
                >
                  Создать
                </button>
              </div>
            </div>
          ) : (
            <div className="grid grid-cols-2 gap-5">
              {displayWishlists.map((wishlist, index) => (
                <button
                  key={wishlist.id !== -1 ? wishlist.id : "auto-generated"}
                  onClick={() => handleAddToWishlist(wishlist)}
                  className="text-left group relative"
                >
                  <div className="relative rounded-lg overflow-hidden aspect-square mb-3">
                    {getWishlistImage(wishlist) ? (
                      <Image
                        src={getWishlistImage(wishlist) || "/placeholder.svg"}
                        alt={wishlist.name}
                        fill
                        className="object-cover group-hover:scale-105 transition-transform duration-300"
                      />
                    ) : (
                      <div className="absolute inset-0 bg-[#27272f] flex items-center justify-center">
                        <Heart size={40} className="text-[#3c3c44]" />
                      </div>
                    )}
                  </div>

                  <div>
                    <h3 className="text-base font-medium truncate">{wishlist.name}</h3>
                    <p className="text-sm text-gray-400">Сохранено: {wishlist.routes.length}</p>
                  </div>
                </button>
              ))}
            </div>
          )}
        </div>

        {/* Create new wishlist button - Fixed at bottom */}
        {!isCreatingNew && (
          <div className="p-5 border-t border-[#27272f] flex-shrink-0">
            <button
              onClick={() => setIsCreatingNew(true)}
              className="w-full py-4 rounded-lg bg-[#27272f] hover:bg-[#323239] transition-colors text-white text-base"
            >
              Создать новый вишлист
            </button>
          </div>
        )}
      </div>
    </div>
  )
}
